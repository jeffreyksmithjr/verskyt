name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.0, v1.0.0, etc.

jobs:
  build-and-publish:
    name: Build and publish Python distributions to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for trusted publishing

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for proper versioning

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Verify tag matches version
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}

        # Extract version from pyproject.toml using sed (more portable than grep -P)
        TOML_VERSION=$(sed -n 's/^version = "\([^"]*\)".*/\1/p' pyproject.toml | head -1)

        echo "Tag version: $TAG_VERSION"
        echo "TOML version: $TOML_VERSION"

        if [ "$TAG_VERSION" != "$TOML_VERSION" ]; then
          echo "‚ùå Version mismatch: tag $TAG_VERSION != pyproject.toml $TOML_VERSION"
          exit 1
        fi

        echo "‚úÖ Version check passed"

    - name: Build package
      run: |
        python -m build

        # Verify build succeeded
        ls -la dist/

        # Basic check that we have both wheel and source dist
        if [ ! -f dist/*.whl ] || [ ! -f dist/*.tar.gz ]; then
          echo "‚ùå Build failed: missing wheel or source distribution"
          exit 1
        fi

        # Debug: Check wheel metadata
        echo "üîç Inspecting wheel metadata..."
        python -c "
        import zipfile
        import glob
        wheel_files = glob.glob('dist/*.whl')
        if wheel_files:
            with zipfile.ZipFile(wheel_files[0], 'r') as z:
                for name in z.namelist():
                    if name.endswith('METADATA'):
                        print(f'=== {name} ===')
                        content = z.read(name).decode('utf-8')
                        # Print first 20 lines to see metadata structure
                        lines = content.split('\n')[:20]
                        for line in lines:
                            print(line)
                        break
        "

        echo "‚úÖ Package built successfully"

    - name: Check package metadata
      run: |
        # Verify package can be installed and imported
        pip install dist/*.whl
        python -c "import verskyt; print(f'‚úÖ Package imports successfully: {verskyt.__version__ if hasattr(verskyt, \"__version__\") else \"no version\"}')"

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.11
      with:
        print-hash: true

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
        generate_release_notes: true
        body: |
          ## Changes in ${{ github.ref_name }}

          This release includes the built distributions for easy installation:

          ```bash
          pip install verskyt==${{ github.ref_name }}
          ```

          See the [CHANGELOG](CHANGELOG.md) for detailed changes.

          ## Verification
          - ‚úÖ All tests pass
          - ‚úÖ Pre-commit hooks pass
          - ‚úÖ Package builds successfully
          - ‚úÖ Version matches tag

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-install:
    name: Test PyPI Installation
    needs: build-and-publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Test installation from PyPI
      run: |
        # Wait a bit for PyPI propagation
        sleep 60

        # Install from PyPI
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        pip install verskyt==$TAG_VERSION

        # Test basic functionality
        python -c "
        import torch
        from verskyt import TverskyProjectionLayer

        # Basic smoke test
        layer = TverskyProjectionLayer(4, 2, 8)
        x = torch.randn(3, 4)
        output = layer(x)

        print(f'‚úÖ Python {python-version}: Installation and basic test successful')
        print(f'   Input shape: {x.shape}, Output shape: {output.shape}')
        "
      env:
        python-version: ${{ matrix.python-version }}
