name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.0, v1.0.0, etc.

jobs:
  build-and-publish:
    name: Build and publish Python distributions to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required for trusted publishing
      contents: write  # Required for creating GitHub releases

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for proper versioning

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools>=64

    - name: Verify tag matches version
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION=${GITHUB_REF#refs/tags/v}

        # Extract version from pyproject.toml using sed (more portable than grep -P)
        TOML_VERSION=$(sed -n 's/^version = "\([^"]*\)".*/\1/p' pyproject.toml | head -1)

        echo "Tag version: $TAG_VERSION"
        echo "TOML version: $TOML_VERSION"

        if [ "$TAG_VERSION" != "$TOML_VERSION" ]; then
          echo "‚ùå Version mismatch: tag $TAG_VERSION != pyproject.toml $TOML_VERSION"
          exit 1
        fi

        echo "‚úÖ Version check passed"

    - name: Build package
      run: |
        # Clean any existing build artifacts
        rm -rf dist/ build/ *.egg-info/
        
        # Show environment info
        echo "üîç Environment info:"
        python --version
        pip --version
        pip list | grep -E "(setuptools|build|wheel)"
        
        # Show pyproject.toml content
        echo "üîç pyproject.toml content:"
        cat pyproject.toml
        
        # Build with explicit setuptools backend
        echo "üîß Building with python -m build..."
        python -m build --wheel --sdist --no-isolation
        
        # Verify build succeeded
        echo "üì¶ Build artifacts:"
        ls -la dist/

        # Basic check that we have both wheel and source dist
        if [ ! -f dist/*.whl ] || [ ! -f dist/*.tar.gz ]; then
          echo "‚ùå Build failed: missing wheel or source distribution"
          exit 1
        fi

        # Debug: Check wheel metadata in detail
        echo "üîç Detailed wheel inspection:"
        python -c "
        import zipfile
        import glob
        import sys
        
        wheel_files = glob.glob('dist/*.whl')
        if not wheel_files:
            print('‚ùå No wheel files found')
            sys.exit(1)
            
        wheel_path = wheel_files[0]
        print(f'üì¶ Inspecting: {wheel_path}')
        
        with zipfile.ZipFile(wheel_path, 'r') as z:
            print('üìÅ All files in wheel:')
            for name in sorted(z.namelist()):
                print(f'  {name}')
            
            print()
            for name in z.namelist():
                if name.endswith('METADATA'):
                    print(f'=== {name} ===')
                    content = z.read(name).decode('utf-8')
                    print(content[:1000])  # First 1000 chars
                    if 'Name:' not in content or 'Version:' not in content:
                        print('‚ùå METADATA missing Name or Version!')
                        sys.exit(1)
                    else:
                        print('‚úÖ METADATA contains Name and Version')
                    break
            else:
                print('‚ùå No METADATA file found in wheel!')
                sys.exit(1)
        "

        echo "‚úÖ Package built successfully"

    - name: Check package metadata
      run: |
        # Verify package can be installed and imported
        pip install dist/*.whl
        python -c "import verskyt; print(f'‚úÖ Package imports successfully: {verskyt.__version__ if hasattr(verskyt, \"__version__\") else \"no version\"}')"

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.11
      with:
        print-hash: true

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.whl
          dist/*.tar.gz
        generate_release_notes: true
        body: |
          ## Changes in ${{ github.ref_name }}

          This release includes the built distributions for easy installation:

          ```bash
          pip install verskyt==${{ github.ref_name }}
          ```

          See the [CHANGELOG](CHANGELOG.md) for detailed changes.

          ## Verification
          - ‚úÖ All tests pass
          - ‚úÖ Pre-commit hooks pass
          - ‚úÖ Package builds successfully
          - ‚úÖ Version matches tag

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-install:
    name: Test PyPI Installation
    needs: build-and-publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Test installation from PyPI
      run: |
        # Wait a bit for PyPI propagation
        sleep 60

        # Install from PyPI
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        pip install verskyt==$TAG_VERSION

        # Test basic functionality
        python -c "
        import torch
        from verskyt import TverskyProjectionLayer

        # Basic smoke test
        layer = TverskyProjectionLayer(4, 2, 8)
        x = torch.randn(3, 4)
        output = layer(x)

        print(f'‚úÖ Python {python-version}: Installation and basic test successful')
        print(f'   Input shape: {x.shape}, Output shape: {output.shape}')
        "
      env:
        python-version: ${{ matrix.python-version }}
