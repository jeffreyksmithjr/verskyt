name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Check code formatting with Black
      run: |
        black --check --diff verskyt tests

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff verskyt tests

    - name: Lint with flake8
      run: |
        flake8 verskyt tests

    - name: Validate imports
      run: |
        python -c "
        import sys
        import importlib.util
        import ast
        import glob

        def check_imports(filename):
            try:
                with open(filename, 'r') as f:
                    tree = ast.parse(f.read())

                # Extract imports
                imports = []
                for node in ast.walk(tree):
                    if isinstance(node, ast.ImportFrom):
                        if node.module and node.module.startswith('verskyt'):
                            for alias in node.names:
                                imports.append((node.module, alias.name))

                # Check that imports can be resolved
                for module, name in imports:
                    try:
                        mod = importlib.import_module(module)
                        if not hasattr(mod, name):
                            print(f'ERROR: {filename}: {module} does not export {name}')
                            return False
                    except ImportError as e:
                        print(f'ERROR: {filename}: Cannot import {module}: {e}')
                        return False
                return True
            except Exception as e:
                print(f'ERROR: {filename}: Failed to parse: {e}')
                return False

        # Check all Python files
        files = glob.glob('verskyt/**/*.py', recursive=True) + glob.glob('tests/**/*.py', recursive=True)
        success = all(check_imports(f) for f in files)
        sys.exit(0 if success else 1)
        "

  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Multi-Python testing only on main branch (expensive)
        # PR builds use single Python version for cost efficiency
        python-version: ${{ github.ref == 'refs/heads/main' && fromJSON('["3.8", "3.9", "3.10", "3.11"]') || fromJSON('["3.11"]') }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with coverage
      run: |
        pytest -v --cov=verskyt --cov-report=xml --cov-report=term-missing -m "not slow"

    - name: Check coverage thresholds
      run: |
        python -c "
        import xml.etree.ElementTree as ET

        # Parse coverage XML
        tree = ET.parse('coverage.xml')
        root = tree.getroot()

        # Get overall coverage
        overall_coverage = float(root.attrib['line-rate']) * 100
        print(f'Overall coverage: {overall_coverage:.1f}%')

        # Check overall threshold (60%)
        if overall_coverage < 60.0:
            print(f'ERROR: Overall coverage {overall_coverage:.1f}% below minimum 60%')
            exit(1)

        # Check core module coverage (should be >75%)
        for package in root.findall('.//package'):
            if package.attrib['name'] == 'verskyt.core':
                core_coverage = float(package.attrib['line-rate']) * 100
                print(f'Core module coverage: {core_coverage:.1f}%')
                if core_coverage < 75.0:
                    print(f'WARNING: Core module coverage {core_coverage:.1f}% below target 75%')
                    # Don't fail on this for now, just warn

        print('Coverage thresholds met')
        "

    - name: Display Python version context
      run: |
        echo "Running on Python ${{ matrix.python-version }}"
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "✅ Full multi-Python testing (main branch)"
        else
          echo "⚡ Fast single-Python testing (PR build)"
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Fast integration check for PRs - only basic functionality
  basic-integration:
    name: Basic Integration
    runs-on: ubuntu-latest
    needs: [quality-checks]
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install package only (no dev dependencies)
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test package imports and basic functionality
      run: |
        python -c "
        # Test all main imports work
        from verskyt import TverskyProjectionLayer, TverskySimilarityLayer
        from verskyt.core import tversky_similarity, compute_salience
        from verskyt.layers import TverskyProjectionLayer as TPL
        print('✅ All package imports successful')

        # Basic functionality test - just create layers, no training
        import torch
        torch.manual_seed(42)

        layer = TverskyProjectionLayer(in_features=2, num_prototypes=2, num_features=4)
        test_input = torch.randn(1, 2)
        output = layer(test_input)

        print(f'✅ Layer creation and forward pass successful: {output.shape}')
        print('✅ Basic integration test passed')
        "

  # Expensive integration tests only on main branch
  full-integration:
    name: Full Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Extended functionality validation
      run: |
        python -c "
        # Test all main imports work
        from verskyt import TverskyProjectionLayer, TverskySimilarityLayer
        from verskyt.core import tversky_similarity, compute_salience
        from verskyt.layers import TverskyProjectionLayer as TPL
        print('✅ All package imports successful')

        # Test basic parameter learning (not XOR convergence)
        import torch
        import torch.nn as nn
        import torch.optim as optim

        torch.manual_seed(42)
        layer = TverskyProjectionLayer(in_features=2, num_prototypes=2, num_features=4, learnable_ab=True)

        # Store initial parameters
        initial_alpha = layer.alpha.clone()
        initial_beta = layer.beta.clone()
        initial_prototypes = layer.prototypes.clone()

        # Simple training step
        optimizer = optim.SGD(layer.parameters(), lr=0.1)
        criterion = nn.MSELoss()

        inputs = torch.randn(4, 2)
        targets = torch.randn(4, 2)  # Use same shape as output

        output = layer(inputs)
        loss = criterion(output, targets)
        loss.backward()
        optimizer.step()

        # Verify parameters changed (basic learning capability)
        alpha_changed = not torch.equal(layer.alpha, initial_alpha)
        beta_changed = not torch.equal(layer.beta, initial_beta)
        prototypes_changed = not torch.equal(layer.prototypes, initial_prototypes)

        print(f'✅ Alpha parameters updated: {alpha_changed}')
        print(f'✅ Beta parameters updated: {beta_changed}')
        print(f'✅ Prototype parameters updated: {prototypes_changed}')

        if not (alpha_changed and beta_changed and prototypes_changed):
            print('ERROR: Some parameters did not update during training')
            exit(1)

        print('✅ Full integration test passed: Parameter learning verified')
        "

    - name: Run slow tests (main branch only)
      run: |
        echo "Running comprehensive benchmark tests..."
        pytest -v tests/test_xor_benchmark.py::TestFastXORBenchmark::test_fast_benchmark_execution -m "slow" --tb=short

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check documentation completeness
      run: |
        echo "Checking for required documentation files..."

        required_files=(
          "README.md"
          "docs/DEVELOPMENT.md"
          "docs/requirements/tnn-specification.md"
          "docs/implementation/plan.md"
          "CLAUDE.md"
        )

        missing_files=()
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            missing_files+=("$file")
          fi
        done

        if [[ ${#missing_files[@]} -gt 0 ]]; then
          echo "ERROR: Missing required documentation files:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        fi

        echo "✅ All required documentation files present"

    - name: Validate development setup instructions
      run: |
        echo "Validating development setup instructions in docs/DEVELOPMENT.md..."

        # Check that key setup commands are documented
        if ! grep -q "pip install -e" docs/DEVELOPMENT.md; then
          echo "ERROR: Development installation instructions missing"
          exit 1
        fi

        if ! grep -q "pre-commit install" docs/DEVELOPMENT.md; then
          echo "ERROR: Pre-commit setup instructions missing"
          exit 1
        fi

        if ! grep -q "pytest" docs/DEVELOPMENT.md; then
          echo "ERROR: Testing instructions missing"
          exit 1
        fi

        echo "✅ Development setup instructions complete"
